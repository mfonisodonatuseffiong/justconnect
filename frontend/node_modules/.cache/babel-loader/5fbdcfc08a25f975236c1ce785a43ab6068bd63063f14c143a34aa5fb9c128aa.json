{"ast":null,"code":"var _jsxFileName = \"/home/donatech/justconnect/frontend/src/components/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from \"react\";\nimport AuthContext from \"../context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { professionalsList } from \"../data/professionals\"; // Your professional users\nimport \"./Login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PROFESSIONAL_PASSWORD = \"pro123\"; // Password for professionals\n\nconst Login = () => {\n  _s();\n  const {\n    login,\n    setUser\n  } = useContext(AuthContext);\n  const [credentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n  const handleChange = e => {\n    setCredentials({\n      ...credentials,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\");\n\n    // Find professional in the list by email (case-insensitive)\n    const matchedProfessional = professionalsList.find(pro => pro.email.toLowerCase() === credentials.email.toLowerCase());\n    if (matchedProfessional) {\n      // Professional found, verify the password\n      if (credentials.password === PROFESSIONAL_PASSWORD) {\n        try {\n          // Call backend to get JWT token for professional\n          const response = await fetch(\"http://localhost:5000/api/auth/professional-login\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              name: matchedProfessional.name,\n              email: matchedProfessional.email\n            })\n          });\n          const data = await response.json();\n          if (!response.ok) {\n            throw new Error(data.message || \"Professional login failed\");\n          }\n          const professionalUser = {\n            token: data.token,\n            name: matchedProfessional.name,\n            email: matchedProfessional.email,\n            role: \"professional\"\n          };\n\n          // Save user and token to context and localStorage\n          localStorage.setItem(\"user\", JSON.stringify(professionalUser));\n          setUser(professionalUser);\n\n          // Navigate to professional dashboard\n          navigate(\"/professional-dashboard\");\n        } catch (error) {\n          console.error(\"Professional login error:\", error);\n          setError(\"Professional login failed. Please try again.\");\n        }\n      } else {\n        setError(\"Incorrect password for professional login.\");\n      }\n      return; // Stop here if professional login attempt\n    }\n\n    // Normal user/admin login flow\n    try {\n      const userData = await login(credentials);\n      if (!userData || !userData.role) {\n        setError(\"Login failed. Please check your credentials.\");\n        return;\n      }\n\n      // Redirect based on user role\n      if (userData.role === \"admin\") {\n        navigate(\"/admin-dashboard\");\n      } else if (userData.role === \"user\") {\n        navigate(\"/user-dashboard\");\n      } else {\n        setError(\"Unrecognized user role.\");\n      }\n    } catch (err) {\n      console.error(\"Login error:\", err);\n      setError(\"Login failed. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Email Address\",\n        value: credentials.email,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        value: credentials.password,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"nwSdkWazeOyqBiSy+9FfephMORo=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useContext","AuthContext","useNavigate","professionalsList","jsxDEV","_jsxDEV","PROFESSIONAL_PASSWORD","Login","_s","login","setUser","credentials","setCredentials","email","password","error","setError","navigate","handleChange","e","target","name","value","handleSubmit","preventDefault","matchedProfessional","find","pro","toLowerCase","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","professionalUser","token","role","localStorage","setItem","console","userData","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","_c","$RefreshReg$"],"sources":["/home/donatech/justconnect/frontend/src/components/Login.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\nimport AuthContext from \"../context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { professionalsList } from \"../data/professionals\"; // Your professional users\nimport \"./Login.css\";\n\nconst PROFESSIONAL_PASSWORD = \"pro123\"; // Password for professionals\n\nconst Login = () => {\n  const { login, setUser } = useContext(AuthContext);\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setCredentials({ ...credentials, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n\n    // Find professional in the list by email (case-insensitive)\n    const matchedProfessional = professionalsList.find(\n      (pro) => pro.email.toLowerCase() === credentials.email.toLowerCase()\n    );\n\n    if (matchedProfessional) {\n      // Professional found, verify the password\n      if (credentials.password === PROFESSIONAL_PASSWORD) {\n        try {\n          // Call backend to get JWT token for professional\n          const response = await fetch(\"http://localhost:5000/api/auth/professional-login\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              name: matchedProfessional.name,\n              email: matchedProfessional.email,\n            }),\n          });\n\n          const data = await response.json();\n\n          if (!response.ok) {\n            throw new Error(data.message || \"Professional login failed\");\n          }\n\n          const professionalUser = {\n            token: data.token,\n            name: matchedProfessional.name,\n            email: matchedProfessional.email,\n            role: \"professional\",\n          };\n\n          // Save user and token to context and localStorage\n          localStorage.setItem(\"user\", JSON.stringify(professionalUser));\n          setUser(professionalUser);\n\n          // Navigate to professional dashboard\n          navigate(\"/professional-dashboard\");\n        } catch (error) {\n          console.error(\"Professional login error:\", error);\n          setError(\"Professional login failed. Please try again.\");\n        }\n      } else {\n        setError(\"Incorrect password for professional login.\");\n      }\n      return; // Stop here if professional login attempt\n    }\n\n    // Normal user/admin login flow\n    try {\n      const userData = await login(credentials);\n\n      if (!userData || !userData.role) {\n        setError(\"Login failed. Please check your credentials.\");\n        return;\n      }\n\n      // Redirect based on user role\n      if (userData.role === \"admin\") {\n        navigate(\"/admin-dashboard\");\n      } else if (userData.role === \"user\") {\n        navigate(\"/user-dashboard\");\n      } else {\n        setError(\"Unrecognized user role.\");\n      }\n    } catch (err) {\n      console.error(\"Login error:\", err);\n      setError(\"Login failed. Please try again.\");\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <h2>Login here</h2>\n      {error && <p className=\"error-message\">{error}</p>}\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email Address\"\n          value={credentials.email}\n          onChange={handleChange}\n          required\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          value={credentials.password}\n          onChange={handleChange}\n          required\n        />\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}